openapi: 3.0.4
info:
  title: orderDirect - Inventory API
  version: inventory_1.4.3
  description: |
    # Policies and Conventions
    This section gives you the basic information needed to use our food service inventory API.  

    ## Authentication
    All requests must be authenticated using an API key via the `key` query parameter.   <pre>GET https://owg.acc.app.hd.digital/api/v1/inventory/restaurant?<b>key=API_KEY</b></pre> The API key should be kept secret.  

    ## Serialization + Compression
    orderDirect only accepts data in JSON format.   To minimize traffic on the inventory endpoints, we require gzip encoding of the payloads for all inventory batch operations.  

    In ACC + STG environments for testing and onboarding purposes you can also send single uncompressed entities via curl/postman/paw etc. up to the `4MB input limit`

    ## Content Headers
    For all requests that include a request body, these headers are required:: <pre>content-type: application/json, content-encoding: gzip (for batch operations)</pre>

    ## PUT Requests
    Generally, all `PUT` operations behave as true RESTful `PUT`, in which entire existing objects are overwritten with the provided content.   A non existing object will not be created by this call.  

    ## Real time & batch sync
    In general all CUD operations are handled in real time with the Google UI. SLO on processing time by Google is:  
    - restaurant creation: max 1-2 days, avg within 1 day  
    - restaurant data update: max 5 min, avg within seconds  

    When performing Batch operations like the nightly sync to orderDirect, please specify the `batch=true` query parameter which controls how we sync your data to Google in the most efficient way.  

    ## Top-level entities
    Restaurant, Menu, Service and Deal should always be top-level entities and must define the @id property.  

    ## Entity examples
    Basic and advanced samples for the Restaurant, Menu and Service models can be found in the folder `/inventory_samples` next to this openAPI specification

    ## DateTime and Time values:
    * `DateTime` must include the date and the time, as well as the timezone:: YYYY-MM-DDTHH:MM[∓HH:MM|Z] <pre>2021-05-01T06:30+02:00 // UTC plus 2 hours 2021-05-01T06:30Z  // UTC timezone. The optional "Z" suffix represents the UTC timezone.</pre>
    * `Time` is the local time for a given restaurant or service location's timezone. Format:: THH:MM <pre>T08:08 // 8:08AM</pre>
    * the formats are based on the schema.org types (ISO 8601) and seconds (:SS) are optional  
    * Google has a special handling of the properties `opens + closes`. Setting them to the exact same value (e.g. T00:00) expresses "totally closed" rather than "24h open"  
      This handling applies also to the properties `availabilityStarts + availabilityEnds`.  

      To express 24h availability you can use: T00:00 - T23:59:59 or leave out the mentioned properties completely.  

    * All `start time` values of timespans ('opens', 'validFrom', 'availabilityStarts', etc.) are `inclusive`, all their interval `end time` counterparts are `exclusive`.    

    ## Null values
    Do not use null values, if a property does not have a value, leave out the whole property.  

    ## Sandbox
    To use the orderDirect Sandbox UI, existing restaurant Google locations of a food/drink related category need to be used.  

    Before the final Go Live to perform real e2e tests, maybe with online payment involved (GPay <> PSP), we can recommend creating your own production test restaurant on Google My Business.  

    ## IDs
    In all inputs, the id is the entity `@id` property and not our internal ID. So when calling `/inventory/restaurant/{id}`, the id is the `@id` the user provided before, when creating the restaurant.  

    When accessing the endpoints, the Slashes `/` contained in the entity @ids need to be encoded as `%2F`  
    <pre>GET /inventory/restaurant/r%2FChIJ13mR2PMhv0cRKac2RnCMZhk  
    GET /inventory/restaurant/r%2FChIJ13mR2PMhv0cRKac2RnCMZhk/service/r%2FChIJ13mR2PMhv0cRKac2RnCMZhk%2Fs_d%2F85</pre>  

    You have to set the "@id" property for the following objects when you create them. To provide the restaurant related entities with an unique @id, the restaurant's "Google_place_ID" has to be used when building the @id strings. Please use the following schema for valid @id's:

    * Restaurant: "r/{google_place_ID}"

    * Services:  
    delivery: "{restaurant_ID}/s_d/{your_ID}"  
    takeout:  "{restaurant_ID}/s_t/{your_ID}"

    * Menu: "{restaurant_ID}/m/{your_ID}"

    * MenuSection: "{restaurant_ID}/ms/{your_ID}"

    * MenuItem: "{restaurant_ID}/mi/{your_ID}"

    * AddOnMenuSection: "{restaurant_ID}/ms_a/{your_ID}"

    * AddOnMenuItem: "{restaurant_ID}/mi_a/{your_ID}"

    * Offer (sku instead of @ID): "{menuItem_ID}/o/{your_ID}"

    The top level entity "deal" is stored independently of a restaurant, because one Deal can be used for multiple restaurants.  

    * Deal: "d/{your_ID}"

    ## Object References
    Object References are an extension to the schema.org structures to bring down the overall JSON data size, avoid duplication and deep nesting.  
    To create a link to the original object within your inventory, instead of the object itself you place a reference which consists of just the @id + @type with the suffix “…Reference”.  
    References are **mandatory** in `Restaurant.hasMenu` and `Service.provider` + `service.hasOfferCatalog` and optional in the Menu entity.  
    Especially on the task to provide a slim Menu, references can be used with all Menu related objects that have an @id, e.g. to re-use MenuItems or AddOns.  

    ## Google Place ID
    If you don't have the Google_place_ID for your restaurants yet, you can get it via the Google Places API by searching with a at best very specific textquery (encode whitespaces with  %20)::

      <a href="https://developers.google.com/places/web-service/search#FindPlaceRequests">https://developers.google.com/places/web-service/search#FindPlaceRequests</a>

    Example: <pre>GET https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=Wessburger%20Wesseling&inputtype=textquery&fields=name,place_id&<b>key=PLACES_API_KEY</b></pre>

    Response: <pre>{"candidates":[{"name":"Wessburger", "place_id":"ChIJ13mR2PMhv0cRKac2RnCMZhk"}],"status":"OK"}</pre>
    If you get more than one matching candidate, specify your search query or implement further verification which of the received places is the restaurant you are looking for.  
    Missing information in your restaurant master data like for example "adressRegion" (federal state) can also be fetched via a "FindPlaceRequest" to the Google Places API.  

    ## Status Codes
    * `200 OK`
       * Request was successful, check response data.  

    * `201 Created`
       * Provided entity was successfully created.  

    * `204 OK - No Response`
       * Operation was successful. No response given to limit traffic.  

    * `400 Bad Request`
        * A parameter is invalid, or a required parameter is missing. This includes the case where no API key is provided and the case where a resource ID is specified incorrectly in a path.  
        * This status is if any of the response errors are of type `requestError`.  

    * `401 Unauthorized`
        * The API key provided is invalid.  

    * `403 Client Error`
        * The request is forbidden for the provided API key.  

    * `404 Not Found`
        * The endpoint does not exist.  

    * `503 Server Error`
        * Service Temporarily Unavailable.  
servers:
  - url: 'https://owg.acc.app.hd.digital/api/v1'
security:
  - api_key: []
tags:
  - name: Restaurant
  - name: Menu
  - name: Service
  - name: Deal
paths:
  /inventory/restaurant:
    get:
      summary: list all restaurants
      description: This call will return a complete list of uploaded restaurants.
      tags:
        - Restaurant
      operationId: listRestaurants
      responses:
        '200':
          description: Complete list of restaurants
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseRestaurant'
      parameters: []
      x-internal: false
    post:
      summary: add one restaurant
      description: This call will add one restaurant.
      parameters:
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      tags:
        - Restaurant
      requestBody:
        $ref: '#/components/requestBodies/Restaurant'
      operationId: addRestaurants
      responses:
        '201':
          description: Created
        '400':
          description: 'Restaurant with id {id} already exists'
    parameters: []
  '/inventory/restaurant/{id}':
    get:
      summary: return one restaurant
      description: This call will return a restaurant by its ID.
      tags:
        - Restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      operationId: viewRestaurant
      responses:
        '200':
          description: Returns requested restaurant details
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseRestaurant'
              examples:
                example-1:
                  value:
                    id: 0
                    restaurantId: string
                    data:
                      '@type': Restaurant
                      '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk
                      name: Wessburger
                      url: 'https://orderdirect.online/restaurant/wessburger-wesseling.html'
                      sameAs: 'http://www.wessburger.de'
                      telephone: '+4922365096037'
                      address:
                        '@type': PostalAddress
                        streetAddress: Flach-Fengler-Straße 120A
                        postalCode: '50389'
                        addressLocality: Wesseling
                        addressRegion: NRW
                        addressCountry: DE
                      geo:
                        '@type': GeoCoordinates
                        latitude: '50.81969792398563'
                        longitude: '6.975704512268408'
                      servesCuisine:
                        - Burger
                      hasMenu:
                        - '@type': MenuReference
                          '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/m/1
                      additionalProperty:
                        - name: imprint
                          value: |
                            Wessburger
                            Flach-Fengler-Straße 120A
                            50389 Wesseling
                            Inhaber: Ole Owner
                            E-Mail: info@wessburger.de
                            Telefon: +4922365096037
                      makesOffer:
                        - '@type': DiscountFoodOfferReference
                          '@id': d/123
                    createdAt: '2019-08-24'
                    updateAt: '2019-08-24'
                    partner:
                      id: 0
                      partner: string
                      fulfillmentEndpoint: string
                      createdAt: '2019-08-24'
                      updateAt: '2019-08-24'
    put:
      summary: update one restaurant
      description: This call will update the restaurant referenced by the ID.
      tags:
        - Restaurant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: '#/components/requestBodies/Restaurant'
      operationId: updateRestaurant
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Restaurant
      summary: delete all data for a restaurant
      description: |
        This call will delete all entities (Service/Menu/Restaurant) referenced by the provided restaurant ID.  
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      operationId: deleteRestaurant
      responses:
        '204':
          description: OK - No Response
  /inventory/restaurant/status/disable:
    post:
      summary: disable specified restaurants
      description: This call will disable specified restaurants (hide on Google)
      tags:
        - Restaurant
      operationId: disableRestaurants
      requestBody:
        $ref: '#/components/requestBodies/RestaurantIds'
      responses:
        '202':
          description: Disabling has been triggered
  /inventory/restaurant/status/enable:
    post:
      summary: enable specified restaurants
      description: This call will enable specified restaurants again after disabling (show on Google)
      tags:
        - Restaurant
      operationId: enableRestaurants
      requestBody:
        $ref: '#/components/requestBodies/RestaurantIds'
      responses:
        '202':
          description: Enabling has been triggered
  '/inventory/restaurant/{restaurantId}/menu':
    get:
      summary: list all menus for a restaurant
      description: This call will list all menus for the restaurant referenced by the ID.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant ID
          schema:
            type: string
      tags:
        - Menu
      operationId: listMenus
      responses:
        '200':
          description: List of menus
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseMenu'
    post:
      summary: add menu for a restaurant
      description: This call will add the given menu to the restaurant referenced by the ID.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant ID
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: '#/components/requestBodies/Menu'
      tags:
        - Menu
      operationId: addMenu
      responses:
        '201':
          description: Created
  '/inventory/restaurant/{restaurantId}/menu/{menuId}':
    get:
      summary: return a menu of a restaurant
      description: This call will return a menu of a restaurant. Both are being referenced by their IDs.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: menuId
          required: true
          description: Menu Id
          schema:
            type: string
      tags:
        - Menu
      operationId: viewMenu
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseMenu'
    put:
      summary: update a menu of a restaurant
      description: This call will update a menu of a restaurant. Both are being referenced by their IDs.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: menuId
          required: true
          description: Menu Id
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: '#/components/requestBodies/Menu'
      tags:
        - Menu
      operationId: updateMenu
      responses:
        '204':
          description: OK - No Response
    delete:
      tags:
        - Menu
      summary: delete a menu
      description: |
        This call will delete a specific menu of a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: menuId
          required: true
          description: Menu Id
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      operationId: deleteMenu
      responses:
        '204':
          description: OK - No Response
  '/inventory/restaurant/{restaurantId}/service':
    get:
      summary: lists all services for a restaurant
      description: This call will list all services for the restaurant referenced by the ID.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant ID
          schema:
            type: string
      tags:
        - Service
      operationId: listServices
      responses:
        '200':
          description: List of services
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseService'
    post:
      summary: add service for a restaurant
      description: This call will add the given service to the restaurant referenced by the ID.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant ID
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      tags:
        - Service
      operationId: addService
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '201':
          description: Created
  '/inventory/restaurant/{restaurantId}/service/{serviceId}':
    get:
      summary: return a service of a restaurant
      description: This call will return a service of a restaurant. Both are being referenced by their IDs.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          description: Service Id
          schema:
            type: string
      tags:
        - Service
      operationId: viewService
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseService'
    put:
      summary: update a service of a restaurant
      description: This call will update a service of a restaurant. Both are being referenced by their IDs.
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          description: Service Id
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: '#/components/requestBodies/Service'
      tags:
        - Service
      operationId: updateService
      responses:
        '204':
          description: OK - No Response
    delete:
      tags:
        - Service
      summary: delete a service
      description: |
        This call will delete a specific service of a restaurant
      parameters:
        - in: path
          name: restaurantId
          required: true
          description: Restaurant Id
          schema:
            type: string
        - in: path
          name: serviceId
          required: true
          description: Service Id
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      operationId: deleteService
      responses:
        '204':
          description: OK - No Response
  /inventory/deal:
    get:
      summary: lists all deals
      description: This call will list all uploaded deals.
      tags:
        - Deal
      operationId: listDeals
      responses:
        '200':
          description: Complete list of deals
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResponseDeal'
    post:
      summary: add deal
      description: This call will add the given deal to your list of deals.
      parameters:
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      tags:
        - Deal
      operationId: addDeal
      requestBody:
        $ref: '#/components/requestBodies/Deal'
      responses:
        '201':
          description: Created
  '/inventory/deal/{dealId}':
    get:
      summary: return deal
      description: This call will return the deal referenced by the ID.
      tags:
        - Deal
      parameters:
        - in: path
          name: dealId
          required: true
          schema:
            type: string
      operationId: viewDeal
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ResponseDeal'
    put:
      summary: update deal
      description: This call will update the deal referenced by the ID.
      parameters:
        - in: path
          name: dealId
          required: true
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        $ref: '#/components/requestBodies/Deal'
      tags:
        - Deal
      operationId: updateDeal
      responses:
        '204':
          description: OK - No Response
    delete:
      tags:
        - Deal
      summary: delete a deal
      description: |
        This call will delete a specific deal entity
      parameters:
        - in: path
          required: true
          name: dealId
          schema:
            type: string
        - in: query
          name: batch
          required: false
          schema:
            type: boolean
            default: false
      operationId: deleteDeal
      responses:
        '204':
          description: OK - No Response
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: key
      in: query
  requestBodies:
    RestaurantIds:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RestaurantIdList'
      required: true
    Restaurant:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Restaurant'
      required: true
    Menu:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Menu'
      required: true
    Service:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Service'
      required: true
    Deal:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Deal'
      required: true
  schemas:
    AddOnMenuItem:
      allOf:
        - $ref: '#/components/schemas/MenuItemBase'
        - type: object
          description: |
            A food or drink addOn to a normal menuItem that can be optionally selected by the customer.  
          properties:
            '@type':
              type: array
              items:
                type: string
                enum:
                  - AddOnMenuItem
                  - FoodBeverageTobaccoProduct
              description: |
                Usually is ['AddOnMenuItem'] but needs to be extended, when the properties AddOnMenuItem.hasAllergen, AddOnMenuItem.additive or AddOnMenuItem.packaging will be used: ['AddOnMenuItem', 'FoodBeverageTobaccoProduct']
            hasMenuItemOptions:
              type: array
              items:
                $ref: '#/components/schemas/AddOnMenuItemOption'
              description: |
                Mutually exclusive with AddOnMenuItem.offers.  
                Array of base attributes, a variation on the add-on item itself (e.g. small, medium, + large fries as an add-on), for the add-on menu item. Use options to specify various variations available for the add-on menu item. There are two scenarios where this can happen:: The base variation is on the add-on item itself (e.g. small, medium, + large fries as add-on) The base variation for the menu item the add-on is associated with (e.g. extra cheese as an add-on for a large pizza)
            menuAddOn:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/AddOnMenuSection'
                  - $ref: '#/components/schemas/AddOnMenuSectionReference'
          required:
            - '@type'
            - '@id'
            - name
    AddOnMenuItemReference:
      type: object
      description: |
        A reference to an existing AddOnMenuItem
      properties:
        '@type':
          type: string
          enum:
            - AddOnMenuItemReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked AddOnMenuItem.  
      required:
        - '@type'
        - '@id'
    AddOnMenuItemOption:
      allOf:
        - $ref: '#/components/schemas/MenuItemOptionBase'
        - type: object
          description: |
            An option to represent choices that a user would be required to make when selecting an AddOn. The user must select an option, otherwise the order is considered invalid. For example, choosing small, medium, or large for the addOn.  
            This option on an AddOn is also used to automatically select AddOn sizes that are bound to sizes/options of the main menuItem.  
          properties:
            value:
              type: array
              items:
                $ref: '#/components/schemas/AddOnMenuItemOptionPropertyValue'
              description: |
                An Array defining the available types of the option for the AddOn. Note, that in contrast to a menuItem, here an addidional option type can be added for pizzas: "PIZZA_SIDE" to define on which side the AddOn should be placed
          required:
            - value
    AddOnMenuItemOptionPropertyValue:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - PropertyValue
        name:
          type: string
          description: |
            "APPLICABLE_ITEM_OPTION": An option for the addOn that is only applicable when used with the MenuItem with the respective "SIZE/OPTION".  
            "PIZZA_SIDE": Specific to pizzas, this add-on is only valid for a portion/whole pizza (like mushroom toppings on the left side, right side, or whole pizza).  
            This Pizza side option type can be use in addition to one of the others on AddOns.  
            "SIZE": An option to designate the size of the add-on (like large fries as an add-on for a meal combo).  
            "OPTION": Any variation other than size. If you can't distinguish between "SIZE" and "OPTION", then use "OPTION".  
          enum:
            - APPLICABLE_ITEM_OPTION
            - PIZZA_SIDE
            - SIZE
            - OPTION
        value:
          type: string
          description: |
            There are 4 options, depending on the option type defined with the above "name" property, how this "value" needs to be defined:  
            name = "APPLICABLE_ITEM_OPTION" => This value has to be present in one of the corresponding "OPTION/SIZE" choices for the parent MenuItem's menuItemOptions.  
            name = "PIZZA_SIDE" =>: The corresponding value here should be "PIZZA_SIDE_LEFT", "PIZZA_SIDE_RIGHT", or "PIZZA_SIDE_WHOLE" for a pizza.  
            In case of a new mandatory selection for the AddOn you can define the UI display name. Examples:  
            name = "SIZE" => value = "medium", "large", etc.  
            name = "OPTION" => value = "hot", "cold", etc.  
      required:
        - '@type'
        - name
        - value
    AddOnMenuSection:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - AddOnMenuSection
        '@id':
          type: string
          description: |
            Unique identifier of the menu section.  
        name:
          type: string
          description: |
            The text that can identify the AddOnMenuSection when a user is browsing the menu.  
        description:
          type: string
          description: |
            Description of the menu section.  
        eligibleQuantity:
          $ref: '#/components/schemas/QuantitativeValue'
        image:
          type: string
          description: |
            The Url for an image of the menu section.  
        hasMenuItem:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AddOnMenuItem'
              - $ref: '#/components/schemas/AddOnMenuItemReference'
          description: |
            Add-on menu items contained in an AddOnMenuSection.  
        offers:
          type: array
          items:
            $ref: '#/components/schemas/OfferMenuSection'
          description: |
            Use Offers to define the availability of the AddOn section.  
            Only one Offer should be valid at a particular point in time.  
        hasMenuSection:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/AddOnMenuSection'
              - $ref: '#/components/schemas/AddOnMenuSectionReference'
          description: |
            A logical sub-grouping of the add-on menu (e.g. Dinner, Appetizers, or Fish dishes).  
        numberOfFreeAddOns:
          type: number
          description: |
            The number of free AddOnMenuItem allowed. Each AddOnMenuItem in the AddOnMenuSection is priced. However, users can select up to numberOfFreeAddOns free of charges. The costs of the most expensive AddOnMenuItem selected will be voided while, when applicable, the additional AddOnMenuItem selected will be charged normally. The default value is 0.  
        defaultOption:
          type: array
          items:
            $ref: '#/components/schemas/AddOnMenuItemReference'
          description: |
            A list of @id referencing AddOnMenuItem to be pre-selected by default for users in the AddOnMenuSection. Users can change the final selections. when defaultOption is not specified, no AddOnMenuItem is pre-selected.  
            The AddOnMenuItem object in defaultOption can only have @id which references an AddOnMenuItem existing in hasMenuItem of the AddOnMenuSection.  
            The number of defaultOption must be less or equal to the maximum eligibleQuantity of the AddOnMenuSection.  
      required:
        - '@type'
        - '@id'
        - name
    AddOnMenuSectionReference:
      type: object
      description: |
        A reference to an existing AddOnMenuSection
      properties:
        '@type':
          type: string
          enum:
            - AddOnMenuSectionReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked AddOnMenuSection.  
      required:
        - '@type'
        - '@id'
    AdvanceServiceDeliveryHoursSpecification:
      type: object
      description: |
        Describes the possible fulfillment time and booking requirements for delivery or takeout advance orders (pre orders).   
      properties:
        '@type':
          type: string
          enum:
            - AdvanceServiceDeliveryHoursSpecification
        validFrom:
          type: string
          description: |
            The beginning date from which users' advance orders can be fulfilled.  
            The validFrom + validThrough properties must be absent or present together.  
            when the type is specified as a specialOpeningHoursSpecification at the Service level, the validFrom property in AdvanceServiceDeliveryHoursSpecification is required.  
            For example, when the hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            The ending date beyond which users' advance orders can no longer be fulfilled.  
            The validFrom + validThrough properties must be absent or present together.  
            when the type is specified as a specialOpeningHoursSpecification at the Service level, the validThrough property in AdvanceServiceDeliveryHoursSpecification is required.  
            The time for validThrough is exclusive. For example, when that time is set to 6PM, the time is valid up to 5:59:59PM.  
            For example, when the hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        opens:
          type: string
          description: |
            Applies to delivery or takeout slots and needs to be inside the general time window set by the main OpeningHoursSpecification.  
            The specific time of day starting from which users' advance orders can be fulfilled. For example, 6:30 AM might be given as "T06:30".  
            The time must be specified in the local time for service. Don't include a timezone in an opens value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        closes:
          type: string
          description: |
            Applies to delivery or takeout slots and needs to be inside the general time window set by the main OpeningHoursSpecification.     The specific time of day beyond which users' advance orders can't be fulfilled anymore. For example, 9:00PM might be given as "T21:00".  
            'closes' is exclusive, so setting it to 9:00PM for a serviceTimeInterval of 15 minutes means that the last available time slot starts at 8:45PM.  
            Time slots crossing midnight are supported within one specification, just set the closes value to the correct time on the next day.  
            The time must be specified in the local time for service. Don't include a timezone in a closes value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        dayOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            Days of the week that the service is available for users' advance orders.  
            When you don't specify any days of the week, then the AdvanceServiceDeliveryHoursSpecification applies to all days.  
        serviceTimeInterval:
          type: string
        advanceBookingRequirement:
          $ref: '#/components/schemas/AdvanceBookingTimeQuantitativeValue'
      required:
        - '@type'
        - serviceTimeInterval
        - advanceBookingRequirement
        - opens
        - closes
    AdditiveDetails:
      type: object
      description: |
        The additives of the dish per <a href="https://www.gs1.org/voc/AdditiveDetails">gs1:AdditiveDetails</a>. To use this type, add 'FoodBeverageTobaccoProduct' to the type of the appropriate Item or ItemOption. (e.g. "@type": ["MenuItem", "FoodBeverageTobaccoProduct"])
      properties:
        '@type':
          type: string
          enum:
            - AdditiveDetails
        additiveName:
          type: string
          description: |
            Name of the additive.  
        additiveLevelOfContainment:
          type: string
          description: |
            Containment code per <a href="https://www.gs1.org/voc/LevelOfContainmentCode">gs1:LevelOfContainmentCode</a>. For example "http://gs1.org/voc/LevelOfContainmentCode-CONTAINS", "http://gs1.org/voc/LevelOfContainmentCode-FREE_FROM" or "http://gs1.org/voc/LevelOfContainmentCode-MAY_CONTAIN".  
      required:
        - '@type'
    AllergenDetails:
      type: object
      description: |
        Allergens of the dish per <a href="https://www.gs1.org/voc/AllergenDetails">gs1:AllergenDetails</a>. To use this type, add 'FoodBeverageTobaccoProduct' to the type of the appropriate Item or ItemOption (e.g. "@type": ["MenuItem", "FoodBeverageTobaccoProduct"])
      properties:
        '@type':
          type: string
          enum:
            - AllergenDetails
        allergenType:
          type: string
          description: |
            Type of allergen per <a href="https://www.gs1.org/voc/AllergenTypeCode">gs1:AllergenTypeCode</a>. For example "http://gs1.org/voc/AllergenTypeCode-PEANUTS"
        allergenLevelOfContainmentCode:
          type: string
          description: |
            Containment code per <a href="https://www.gs1.org/voc/LevelOfContainmentCode">gs1:LevelOfContainmentCode</a>. For example "http://gs1.org/voc/LevelOfContainmentCode-CONTAINS", "http://gs1.org/voc/LevelOfContainmentCode-FREE_FROM" or "http://gs1.org/voc/LevelOfContainmentCode-MAY_CONTAIN".  
      required:
        - '@type'
    Deal:
      type: object
      description: |
        Deals specify fixed discounts that are applied to all orders with a specific restaurant. The active promotion is directly shown to the user upfront on the food provider selection on a restaurants Google entry. Using this feature wisely can lead the user to choose orderDirect instead of another food provider. Promotion code processing withing the submit handling is required to use this feature.  
      properties:
        '@type':
          type: string
          enum:
            - DiscountFoodOffer
        '@id':
          type: string
          description: |
            The unique identifier for the Deal "d/{your_ID}"
        identifier:
          type: string
          description: |
            Unique deal ID. For example, "WESS23” or “BURGEROFF25”.  

            This ID must uniquely identify the deal in your promotion system.  
        applicableFulfillmentMethod:
          type: array
          items:
            type: string
            enum:
              - DELIVERY
              - TAKEOUT
          description: |
            The service that this deal is applicable to.  

            Default assumes a deal applicable to all.  
        eligibleMaxNumberOfPastSuccessfulOrders:
          type: number
          description: |
            This offer is only eligible when the user has less than or equal to this number of past successful orders.  
        validFrom:
          type: string
          description: |
            The date + time (including the timezone) when the discount specified becomes valid.  
            For example, when the discount is availabe for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            Date and time after which the discount becomes invalid. For example the end of an offer, salary period, or a period of opening hours.  
            For example, when the discount is availabe for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
        availableDay:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            Days of the week that the item is available.  
        availabilityStarts:
          type: string
          description: |
            The daytime from which the discount is available. Example: 10 AM CEST -> "T10:00".  
            The time must be specified in the local time for the restaurant.  
            For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        availabilityEnds:
          type: string
          description: |
            The daytime, when the discount is not available anymore. the time is exclusive, so when it is set to 6PM, the last discount can be granted at 5:59:59PM. Example: "T18:00".  
            The time must be specified in the local time for the restaurant.  
            For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        isDisabled:
          type: boolean
          description: |
            This overrides other validity checks. The default value is false. When is_disabled is true, the deal won’t be applied.  
        category:
          type: string
          enum:
            - CART_OFF
            - DELIVERY_OFF
            - SERVICE_OFF
          description: |
            Category of deal to apply the discount to. The category can be the whole cart total, service fees, or delivery fees.  
        discountPercentage:
          type: number
          description: |
            Value of the discount as a percentage of the original price.  

            You must provide a valid value for exactly one of the discountPercentage and discount properties.  
        discount:
          type: number
          description: |
            Value of the discount as a number.  

            You must provide a valid value for exactly one of the discountPercentage and discount properties.  
        discountCurrency:
          type: string
          description: |
            The 3-letter ISO 4217 currency code. For example, "EUR". Required if discount is set.  
        eligibleTransactionVolume:
          $ref: '#/components/schemas/PriceSpecification'
        termsOfService:
          type: string
          description: |
            Url to a human-readable terms of service documentation.  
      required:
        - '@type'
        - '@id'
        - identifier
        - validFrom
        - validThrough
        - category
        - termsOfService
      example:
        '@context': schema.org
        '@type': DiscountFoodOffer
        '@id': d/123
        identifier: BURGEROFF25
        applicableFulfillmentMethod:
          - DELIVERY
          - TAKEOUT
        eligibleMaxNumberOfPastSuccessfulOrders: 5
        validFrom: '2021-05-01T00:00+02:00'
        validThrough: '2021-05-30T00:00+02:00'
        availableDay:
          - Monday
          - Tuesday
        availabilityStarts: 'T17:00'
        availabilityEnds: 'T20:00'
        isDisabled: false
        category: CART_OFF
        discountPercentage: 10
        discountCurrency: EUR
        eligibleTransactionVolume:
          '@type': PriceSpecification
          minPrice: '10.00'
          priceCurrency: EUR
        termsOfService: 'https://orderdirect.online/wessburger/burgeroff25'
    DealReference:
      type: object
      description: |
        A reference to an existing Deal
      properties:
        '@type':
          type: string
          enum:
            - DiscountFoodOfferReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked Deal.  
      required:
        - '@type'
        - '@id'
    DeliveryChargeSpecification:
      type: object
      description: |
        Indicates the details on the price of the delivery. If multiple DeliveryChargeSpecification objects are applicable, the most specific one is applied. Use mutually exclusive DeliveryChargeSpecification objects to avoid any ambiguity.  
      properties:
        '@type':
          type: string
          enum:
            - DeliveryChargeSpecification
        '@id':
          type: string
          description: |
            Identifier for the DeliveryChargeSpecification.  
        price:
          type: string
          description: |
            Total delivery cost as a numerical only value. Use the priceCurrency property to denote the type of currency instead of currency symbols.  
            For example, "6.00", without the currency symbol.  

            To configure a DeliveryChargeSpecification for free delivery, set the price = 0 and the eligibleTransactionVolume.minPrice to the price line, from which on this specification shall be applied.  
            The same could be done with the eligibleRegion property, if for a region no delivery fee shall be applied.  
        priceCurrency:
          type: string
          description: |
            The 3-letter ISO 4217 currency code. For example, "EUR".  
        eligibleTransactionVolume:
          $ref: '#/components/schemas/PriceSpecification'
        eligibleRegion:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/GeoShape'
              - $ref: '#/components/schemas/Place'
              - $ref: '#/components/schemas/GeoCircle'
          description: |
            The place, or the GeoShape/GeoCircle for the geo-political region(s) for which the offer or delivery charge specification is valid. Use the property only when delivery fees vary by the region.  
        validFrom:
          type: string
          description: |
            The date + time (including the timezone) when the delivery charge specified becomes valid. For example, "2021-05-01T06:30+02:00".  
            For example, when hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            The date + time (including the timezone) after which the delivery charge specified is not valid. For example, "2021-05-01T06:30+02:00". The time for validThrough is exclusive:: for example, when that time is set to 6PM, the time is valid up to 5:59:59PM.  For example, when hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
      required:
        - '@type'
        - '@id'
        - price
        - priceCurrency
    GeoCircle:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - GeoCircle
        geoMidpoint:
          $ref: '#/components/schemas/GeoCoordinates'
        geoRadius:
          type: string
          description: |
            Indicates the approximate radius (in meters) of a GeoCircle.  
      required:
        - '@type'
        - geoMidpoint
        - geoRadius
    GeoCoordinates:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - GeoCoordinates
        latitude:
          type: string
          description: |
            Latitude in degrees. Values are restricted to the range [[-90, 90]].  
            This means that when the value specified is less than -90, it will be set to -90; when the value is greater than 90, it will be set to 90.  
            The precision should be at least 5 decimal places.  
        longitude:
          type: string
          description: |
            Longitude in degrees. Values outside the range [[-180, 180]] will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.  
            The precision should be at least 5 decimal places.  
      required:
        - '@type'
        - latitude
        - longitude
    GeoShape:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - GeoShape
        polygon:
          type: array
          items:
            type: string
          description: |
            A polygon or multipolygon expressed as a series of three or more space delimited points. It is recommended that the first + last points be the same, but it is not required.  
            Each point in a polygon or multipolygon is defined by a latitude point followed by a longitude point. You also must specify the points in a counter-clockwise direction.  
            In most cases you will have a single polygon.  
      required:
        - '@type'
        - polygon
    Menu:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Menu
        '@id':
          type: string
          description: |
            The unique identifier for the menu "{restaurant_ID}/m/{your_ID}"
        name:
          type: string
          description: |
            The text that can identify the Menu when a user is browsing the menu.  
        description:
          type: string
          description: |
            Description of the menu.  
        disclaimer:
          $ref: '#/components/schemas/MenuDisclaimer'
        inLanguage:
          type: string
          description: |
            The language of the menu content, as a language code from the IETF BCP 47 standard.  
            For example, "en-US".  
        hasMenuSection:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/MenuSection'
              - $ref: '#/components/schemas/MenuSectionReference'
        hasMenuItem:
          type: array
          minItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/MenuItem'
              - $ref: '#/components/schemas/MenuItemReference'
      required:
        - '@type'
        - '@id'
        - name
      example:
        '@type': Menu
        '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/m/1
        name: Erstes Menü
        inLanguage: de
        hasMenuSection:
          - '@type': MenuSection
            '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/ms/16101
            name: Burger
            offers:
              - '@type': Offer
                availableDay:
                  - Monday
                  - Tuesday
                  - Wednesday
                  - Thursday
                  - Friday
                  - Saturday
                  - Sunday
            hasMenuItem:
              - '@type':
                  - MenuItem
                  - FoodBeverageTobaccoProduct
                '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/mi/127448
                name: Classic Burger
                description: '180g. 100% Rindfleisch, Salat, Zwiebeln, Tomaten, Gurken, Ketchup, Mayo'
                offers:
                  - '@type': Offer
                    sku: r/ChIJ13mR2PMhv0cRKac2RnCMZhk/mi/127448/o/1
                    price: '6.7'
                    priceCurrency: EUR
                    availableDay:
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Sunday
                hasAllergen:
                  - '@type': AllergenDetails
                    allergenType: 'http://gs1.org/voc/AllergenTypeCode-GLUTEN'
                    allergenLevelOfContainmentCode: 'http://gs1.org/voc/LevelOfContainmentCode-MAY_CONTAIN'
                  - '@type': AllergenDetails
                    allergenType: 'http://gs1.org/voc/AllergenTypeCode-LACTOSE'
                    allergenLevelOfContainmentCode: 'http://gs1.org/voc/LevelOfContainmentCode-FREE_FROM'
                additive:
                  - '@type': AdditiveDetails
                    additiveName: phosphate
                    additiveLevelOfContainment: 'http://gs1.org/voc/LevelOfContainmentCode-CONTAINS'
              - '@type':
                  - MenuItem
                '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/mi/127467
                name: Cheese Burger
                description: '180g. 100% Rindfleisch, Salat, Zwiebeln, Tomaten, Gurken, Cheddar'
                offers:
                  - '@type': Offer
                    sku: r/ChIJ13mR2PMhv0cRKac2RnCMZhk/mi/127467/o/1
                    price: '7.2'
                    priceCurrency: EUR
                    availableDay:
                      - Monday
                      - Tuesday
                      - Wednesday
                      - Thursday
                      - Friday
                      - Saturday
                      - Sunday
    MenuReference:
      type: object
      description: |
        A reference to an existing Menu
      properties:
        '@type':
          type: string
          enum:
            - MenuReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked Menu.  
      required:
        - '@type'
        - '@id'
    MenuCatalogReference:
      type: object
      description: |
        A reference to an existing Menu
      properties:
        '@type':
          type: array
          items:
            type: string
          example:
            - MenuReference
            - OfferCatalog
        '@id':
          type: string
          description: |
            A unique identifier of the linked Menu.  
      required:
        - '@type'
        - '@id'
    MenuDisclaimer:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - MenuDisclaimer
        '@id':
          type: string
          description: |
            Unique identifier for the menu disclaimer.  
        text:
          type: string
          description: |
            The disclaimer text.  

            For example, "The average adult daily energy intake is 8700 kJ."
        url:
          type: string
          description: |
            The URL pointing to a page providing more details on the disclaimer.  
      required:
        - '@type'
        - '@id'
        - text
    MenuItemInfo:
      type: object
      properties:
        suitableForDiet:
          type: array
          items:
            $ref: '#/components/schemas/RestrictedDiet'
          description: |
            The dish complies with the described dietary restriction (e.g.  
            "http://schema.org/GlutenFreeDiet", "http://schema.org/VeganDiet", etc. This is an enumerated list of possible values.  
        nutrition:
          $ref: '#/components/schemas/NutritionInformation'
        hasAllergen:
          type: array
          items:
            $ref: '#/components/schemas/AllergenDetails'
          description: |
            List of allergens for this menuItem.  
        additive:
          type: array
          items:
            $ref: '#/components/schemas/AdditiveDetails'
          description: |
            List of additives for this menuItem.  
        packaging:
          type: array
          items:
            $ref: '#/components/schemas/PackagingDetails'
    MenuItemBase:
      allOf:
        - $ref: '#/components/schemas/MenuItemInfo'
        - type: object
          properties:
            '@id':
              type: string
              description: |
                Unique identifier of the menu item.  
            name:
              type: string
              description: |
                The text that can identify the MenuItem when a user is browsing the menu.  
            description:
              type: string
              description: |
                Description of the menu item.  
            image:
              type: string
              description: |
                The Url for an image of the menu item.  

                Image Guidelines::
                Aspect Ratio 3:2
                min Resolution 600 x 400 px. 72. Dpi
                Recommended Resolution 1400 x 960 px. 72. dpi
            offers:
              type: array
              items:
                $ref: '#/components/schemas/OfferMenuItem'
              description: |
                Mutually exclusive with MenuItem.hasMenuItemOptions.  
                One or many offers to provide the MenuItem. Describes when + at what price the MenuItem is available. Only one offer should be valid at a particular point in time. Multiple offers can be provided when there is variation on price/availability. when the food item differs through a base attribute, (for example, size for pizza), use menuItemOption. The default for Offer.eligibleQuantity is min of 0 with no upper limit.  
            hasMenuItemOptions:
              type: array
              items:
                $ref: '#/components/schemas/MenuItemOption'
              description: |
                Mutually exclusive with MenuItem.offers.  
                List of base options/variation for the menu item. Options should be used to specify various base variations available for the item, for example small, medium + large.  
          required:
            - '@id'
            - name
    MenuItem:
      allOf:
        - $ref: '#/components/schemas/MenuItemBase'
        - type: object
          properties:
            '@type':
              type: array
              items:
                type: string
                enum:
                  - MenuItem
                  - FoodBeverageTobaccoProduct
              description: |
                Usually is ['MenuItem'] but needs to be extended, when the properties MenuItem.hasAllergen, MenuItem.additive or MenuItem.packaging will be used: ['MenuItem', 'FoodBeverageTobaccoProduct']
            hasMenuItemOptions:
              type: array
              items:
                $ref: '#/components/schemas/MenuItemOption'
              description: |
                Mutually exclusive with MenuItem.offers.  
                List of base options/variation for the menu item. Options should be used to specify various base variations available for the item, for example small, medium + large.  
            menuAddOn:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/AddOnMenuSection'
                  - $ref: '#/components/schemas/AddOnMenuSectionReference'
          required:
            - '@type'
    MenuItemReference:
      type: object
      description: |
        A reference to an existing MenuItem
      properties:
        '@type':
          type: array
          items:
            type: string
            enum:
              - MenuItemReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked MenuItem.  
      required:
        - '@type'
        - '@id'
    MenuItemOptionBase:
      allOf:
        - $ref: '#/components/schemas/MenuItemInfo'
        - type: object
          description: |
            An option to represent choices that a user would be required to make when selecting a dish or combo. The user must select an option, otherwise the order is considered invalid. For example, choosing small, medium, or large in the case of a pizza.  
          properties:
            '@type':
              type: array
              items:
                type: string
                enum:
                  - MenuItemOption
                  - FoodBeverageTobaccoProduct
              description: |
                Usually is ['MenuItemOption'] but needs to be extended, when the properties MenuItemOption.hasAllergen, MenuItemOption.additive or MenuItemOption.packaging will be used: ['MenuItemOption', 'FoodBeverageTobaccoProduct']
            offers:
              type: array
              items:
                $ref: '#/components/schemas/OfferMenuItem'
              description: |
                One or more offers to provide the MenuItemOption. Describes when + at what price the MenuItemOption is available. Only one offer should be valid at a particular point in time. You can have many valid offers when the price/availability can change. Don't use Offer.eligibleQuantity. MenuItemOption is mutually exclusive, so Offer.eligibleQuantity will be ignored when provided.  
            menuAddOn:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/AddOnMenuSection'
                  - $ref: '#/components/schemas/AddOnMenuSectionReference'
          required:
            - '@type'
            - offers
    MenuItemOption:
      allOf:
        - $ref: '#/components/schemas/MenuItemOptionBase'
        - type: object
          description: |
            An option to represent choices that a user would be required to make when selecting a dish or combo. The user must select an option, otherwise the order is considered invalid. For example, choosing small, medium, or large in the case of a pizza.  
          properties:
            value:
              $ref: '#/components/schemas/MenuItemOptionPropertyValue'
          required:
            - value
    MenuItemOptionPropertyValue:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - PropertyValue
        name:
          type: string
          description: |
            "SIZE": Size of the MenuItem. For example, small, medium, or large.  
            "OPTION": Any variation other than size (like a dish that comes either as a salad or a sandwich). If you can't distinguish between "SIZE" and "OPTION", then use "OPTION".  
          enum:
            - SIZE
            - OPTION
        value:
          type: string
          description: |
            Defines the UI display name for this menuItemOption. Examples: name = "SIZE" => value = "medium", "large (30 cm)", etc.  
            name = "OPTION" => value = "as salad", "as sandwich", etc.  
      required:
        - '@type'
        - name
        - value
    MenuSection:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - MenuSection
        '@id':
          type: string
          description: |
            Unique identifier of the menu section.  
        name:
          type: string
          description: |
            The text that can identify the MenuSection when a user is browsing the menu.  
        description:
          type: string
          description: |
            Description of the menu section.  
        hasMenuSection:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MenuSection'
              - $ref: '#/components/schemas/MenuSectionReference'
          description: |
            A logical sub-grouping of the MenuSection (e.g. for the MenuSection, Dinner one can have multiple sub-MenuSections like "Poultry Dishes", "Vegetarian", etc.).  
        hasMenuItem:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/MenuItem'
              - $ref: '#/components/schemas/MenuItemReference'
          description: |
            MenuItems contained in a MenuSection.  
        offers:
          type: array
          items:
            $ref: '#/components/schemas/OfferMenuSection'
          description: |
            Use Offers to define the availability of the section.  
            Only one Offer should be valid at a particular point in time.  
        image:
          type: string
          description: |
            The Url for an image of the menu section.  
      required:
        - '@type'
        - '@id'
        - name
    MenuSectionReference:
      type: object
      description: |
        A reference to an existing MenuSection
      properties:
        '@type':
          type: string
          enum:
            - MenuSectionReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked MenuSection.  
      required:
        - '@type'
        - '@id'
    NutritionInformation:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - NutritionInformation
        description:
          type: string
          description: |
            Nutrition information in free text. For example "Contains preservatives".  
        calories:
          type: string
          description: |
            The number of calories in Cal, kcal, or kJ, using the below format:: number Cal_kcal_OR_kJ For example, "240 Cal".  
        carbohydrateContent:
          type: string
          description: |
            The amount of carbohydrates, typically in g, using the below format:: number g_OR_mg For example, "7 g".  
        cholesterolContent:
          type: string
          description: |
            The amount of cholesterol, typically in mg, using the below format:: number g_OR_mg For example, "12 mg".  
        fatContent:
          type: string
          description: |
            The amount of fat, typically in g, using the below format::
            number g_OR_mg
            For example, "42 g".  
        fiberContent:
          type: string
          description: |
            The number of g or mg of fiber, using the below format::
            number g_OR_mg
        proteinContent:
          type: string
          description: |
            The number of g or mg of protein, using the below format::
            number g_OR_mg
        saturatedFatContent:
          type: string
          description: |
            The number of g or mg of saturated fat, using the below format::
            number g_OR_mg
        servingSize:
          type: number
          description: |
            The serving size in mL, L, g, or kg, in terms of the number of volume or mass. Needs to be an Integer value.  
        sodiumContent:
          type: string
          description: |
            The number of mg or g of sodium, using the below format::
            number g_OR_mg
        sugarContent:
          type: string
          description: |
            The number of g or mg of sugar, using the below format::
            number g_OR_mg
        transFatContent:
          type: string
          description: |
            The number of g or mg of trans fat, using the below format::
            number g_OR_mg
        unsaturatedFatContent:
          type: string
          description: |
            The amount of unsaturated fat, typically in g, using the below format:: number g_OR_mg
      required:
        - '@type'
    OfferMenuSection:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Offer
        availabilityStarts:
          type: string
          description: |
            The daytime at which the MenuSection becomes available. For example, pancakes are served beginning at 7:00am; the value of the field might look like: "T07:00".  
            The time must be specified in the local time for the restaurant.  
            For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        availabilityEnds:
          type: string
          description: |
            The daytime, when the MenuSection is not available anymore. the time is exclusive, so when it is set to 10AM for serving pancakes, the last pancake can be served at 9:59:59AM. The value of the field might look like: "T10:00".  
            The time must be specified in the local time for the restaurant.  
            For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        availableDay:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            Days of the week that the item is available. Valid values are:: "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday" when you have different availability for different days of the week, use more than one Offer object.  
        validFrom:
          type: string
          description: |
            The date + time (including the timezone) at which the MenuSection becomes available. For Example: "2021-05-01T07:00+02:00". For more information, see 'DateTime and Time values' in the introduction of this document.  
        validThrough:
          type: string
          description: |
            The date + time (including the timezone) after which the MenuSection is no longer available. For example: "2021-05-01T18:00+02:00" The time for validThrough is exclusive: for example, when the time on the end date is set to 6PM, the Offer is valid up to 5:59:59PM. For more information, see 'DateTime and Time values' in the introduction of this document.  
      required:
        - '@type'
    OfferMenuItem:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Offer
        sku:
          type: string
          description: |
            An unique identifier of the MenuItem Offer. The .sku value will be send in an order request to you as LineItem.offerId
        price:
          type: string
          description: |
            Price of the offered item. For example, "6.00" without the currency symbol.  
        priceCurrency:
          type: string
          description: |
            The currency (in 3-letter ISO 4217 format) of the price or a price component, when attached to PriceSpecification + its subtypes.  
        availabilityStarts:
          type: string
          description: |
            The daytime, e.g. "T10:00", from which the food item is available at the specified price.  
            The time must be specified in the local time for the restaurant.    For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        availabilityEnds:
          type: string
          description: |
            The daytime, e.g. "T14:00", when the food item is not available anymore at the specified price. the time is exclusive, so when it is set to 2PM, the Offer becomes invalid after 1:59:59PM.     The time must be specified in the local time for the restaurant.  
            For more information, especially how to define "24h available" or "totally unavailable", see 'DateTime and Time values' in the introduction of this document.  
        availableDay:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            Days of the week that the item is available. Valid values are:: "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday" when you have different availability for different days of the week, use more than one Offer object.  
        validFrom:
          type: string
          description: |
            The date + time (including the timezone), when a food item becomes available at the specified price. For Example: "2021-05-01T07:00+02:00". For more information, see 'DateTime and Time values' in the introduction of this document.  
        validThrough:
          type: string
          description: |
            The date + time (including the timezone) after which a food item at the specified price is not available anymore. For example: "2021-05-01T18:00+02:00" The time for validThrough is exclusive: for example, when that time is set to 6PM, the time is valid up to 5:59:59PM. For more information, see 'DateTime and Time values' in the introduction of this document.  
        eligibleQuantity:
          $ref: '#/components/schemas/QuantitativeValue'
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        inventoryLevel:
          $ref: '#/components/schemas/QuantitativeValue'
      required:
        - '@type'
        - sku
        - price
        - priceCurrency
    OfferService:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Offer
        priceSpecification:
          type: array
          maxItems: 1
          items:
            oneOf:
              - $ref: '#/components/schemas/DeliveryChargeSpecification'
              - $ref: '#/components/schemas/PaymentChargeSpecification'
          description: |
            With this property you can specify a variety of fees to users upfront. Currently only one active DeliveryChargeSpecification or one active PaymentChargeSpecification (for takeout orders) is supported. Combine all types of fees into a single ChargeSpecification of one of those mutually exclusive types. 
      required:
        - '@type'
        - priceSpecification
    OpeningHoursSpecification:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - OpeningHoursSpecification
        '@id':
          type: string
          description: |
            Identifier for the OpeningHoursSpecification.  
        dayOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            The day of the week for which these opening hours are valid.  
            Acceptable values are "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", + "Sunday". For example:: "dayOfWeek": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ] when you Don't specify any days of week, then the OpeningHoursSpecification applies to all days.  
        opens:
          type: string
          description: |
            The property indicates the specific time of day starting from which users' orders can be placed.  
            It specifies the opening time for when the online system is up + allows users to place orders.  
            Within those online system opening/closing hours, you can use deliveryHours to specify opening/closing hours when users can order special types of deliveries.  
            The time must be specified in the local time for the service.  
            For example, 6:30AM might be given as "T06:30".  
            Don't include a timezone in an opens value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        closes:
          type: string
          description: |
            The property indicates the specific time of day beyond which users' orders can't be placed.  
            It specifies the closing time for when the online system is up and allows users to place orders.  
            Within those online system opening/closing hours, you can use deliveryHours to specify opening/closing hours when users can order special types of deliveries.  
            The time must be specified in the local time for the service.  
            For example, 10:30PM might be given as "T22:30".  
            Opening Hours crossing midnight are supported within one specification, just set the closes value to the correct time on the next day.  
            Don't include a timezone in a closes value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        validFrom:
          type: string
          description: |
            The field indicates the beginning date starting from which users' orders can be placed.  
            In addition to the date, the time + timezone portions of the value are required.  
            For the timezone, use the Restaurant timezone.  
            For example, when the hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            The field indicates indicates the ending date beyond which users' orders can no longer be placed.  
            In addition to the date, the time + timezone portions of the DateTime are required.  
            For the timezone, use the Restaurant timezone.  
            The time for validThrough is exclusive. For example, when that time is set to 6PM, the time is valid up to 5:59:59PM.  
            For example, when the hours given are good for all of 2021, you might set validFrom to "2021-01-01T00:00+02:00" + validThrough to "2021-12-31T23:59:59+02:00".  
            For more information, see DateTime + Time formats.  
        deliveryHours:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ServiceDeliveryHoursSpecification'
              - $ref: '#/components/schemas/AdvanceServiceDeliveryHoursSpecification'
          description: |
            The delivery or takeout time specification. the parameter is required unless the restaurant is closed (meaning that the opens + closes are set + equal to each other. ServiceDeliveryHoursSpecification: Within the opening/closing hours, you can set "opens" + "closes" hours when users can place ASAP orders.  
            AdvanceServiceDeliveryHoursSpecification:: Within the opening/closing hours, you can set "opens" + "closes" hours when users advance orders can be fulfilled.  
      required:
        - '@type'
        - deliveryHours
        - opens
        - closes
    PackagingDetails:
      type: object
      description: |
        The packaging and recycling information of an Item per <a href="https://www.gs1.org/voc/PackagingDetails">gs1:PackagingDetails</a>. To use this type, add 'FoodBeverageTobaccoProduct' to the type of the Item or ItemOption. (e.g. "@type": ["MenuItem", "FoodBeverageTobaccoProduct"])
      properties:
        '@type':
          type: string
          enum:
            - PackagingDetails
        packagingRecyclingProcessType:
          type: string
          description: |
            Packaging recycling process type per <a href="https://www.gs1.org/voc/PackagingRecyclingProcessTypeCode">gs1:PackagingRecyclingProcessTypeCode</a>. For example "http://gs1.org/voc/PackagingRecyclingProcessTypeCode-RECYCLABLE" or "http://gs1.org/voc/PackagingRecyclingProcessTypeCode-REUSABLE"
        hasReturnablePackageDeposit:
          type: array
          items:
            $ref: '#/components/schemas/ReturnablePackageDepositDetails'
      required:
        - '@type'
    ReturnablePackageDepositDetails:
      type: object
      description: |
        Returnable package deposit details per <a href="https://www.gs1.org/voc/ReturnablePackageDepositDetails">gs1:ReturnablePackageDepositDetails</a>. For example, bottles and cans have returnable package deposits. To use this type add, 'FoodBeverageTobaccoProduct' to the type of the Item or ItemOption. (e.g. "@type": ["MenuItem", "FoodBeverageTobaccoProduct"])
      properties:
        '@type':
          type: string
          enum:
            - ReturnablePackageDepositDetails
        returnablePackageDepositAmount:
          type: object
          description: |
            The amount of deposit for this item per <a href="https://www.gs1.org/voc/PriceSpecification">gs1:PriceSpecification</a>. For example, 0.25 EUR deposit per can.  
          properties:
            '@type':
              type: string
              enum:
                - 'http://gs1.org/voc/PriceSpecification'
            'http://gs1.org/voc/price':
              type: string
              description: |
                Price in common format. e.g. 0.50
            'http://gs1.org/voc/priceCurrency':
              type: string
              description: |
                EUR / USD / etc.  
      required:
        - '@type'
    PaymentChargeSpecification:
      type: object
      description: |
        Indicates the details on the price for takeout. If multiple PaymentChargeSpecification objects are applicable, the most specific one is applied. Use mutually exclusive PaymentChargeSpecification objects to avoid any ambiguity.  
      properties:
        '@type':
          type: string
          enum:
            - PaymentChargeSpecification
        '@id':
          type: string
          description: |
            Identifier for the PaymentChargeSpecification.  
        price:
          type: number
          description: |
            Total amount of the charge. For example, "6.00", without the currency symbol.  
        priceCurrency:
          type: string
          description: |
            The 3-letter ISO 4217 currency code of the price. For example, "EUR".  
        eligibleTransactionVolume:
          $ref: '#/components/schemas/PriceSpecification'
        validFrom:
          type: string
          description: |
            The date + time (including the timezone) when the payment charge specified becomes valid. For example, "2021-05-01T07:00+02:00".  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            The date + time (including the timezone) when the payment charge specified is not valid. For example, "2021-05-01T07:30+02:00".  
            The time for validThrough is exclusive:: for example, when that time is set to 6PM, the time is valid up to 5:59:59PM. For more information, see DateTime + Time formats.  
      required:
        - '@type'
        - '@id'
        - price
        - priceCurrency
    Place:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Place
        address:
          $ref: '#/components/schemas/PostalAddressDelivery'
      required:
        - '@type'
        - address
    PostalAddressDelivery:
      type: object
      description: |
        A postal code area used as a delivery area.  
      properties:
        '@type':
          type: string
          enum:
            - PostalAddress
        addressLocality:
          type: string
          description: |
            The locality or city. For example, "Dusseldorf".  
        addressRegion:
          type: string
          description: |
            The region or federal state. For example, "NRW" or "Nordrhein-Westfalen"
        postalCode:
          type: string
          description: |
            The postal code. For example, "40235".  
        addressCountry:
          type: string
          description: |
            Two-letter ISO 3166-1 alpha-2 country code . For example, "DE".  
      required:
        - '@type'
        - addressLocality
        - addressRegion
        - postalCode
        - addressCountry
    PostalAddressRestaurant:
      allOf:
        - $ref: '#/components/schemas/PostalAddressDelivery'
        - type: object
          description: |
            The postal address of a restaurant.  
          properties:
            streetAddress:
              type: string
              description: |
                The street address. For example, "Metro-Strasse 1".  
          required:
            - streetAddress
    PriceSpecification:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - PriceSpecification
        '@id':
          type: string
          description: |
            Identifier for the PriceSpecification.  
        minPrice:
          type: string
          description: |
            The lowest price when the price is a range.  
        maxPrice:
          type: string
          description: |
            The highest price when the price is a range.  
        priceCurrency:
          type: string
          description: |
            The 3-letter ISO 4217 currency code of the price. For example, "EUR".  
      required:
        - '@type'
        - priceCurrency
    Restaurant:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Restaurant
        '@id':
          type: string
          description: |
            The unique identifier for the restaurant "r/{google_place_ID}"
        name:
          type: string
        url:
          $ref: '#/components/schemas/URL'
        sameAs:
          $ref: '#/components/schemas/URL'
        email:
          type: string
        description:
          type: string
        telephone:
          type: string
          description: |
            Using the following format: [+][country_code][phone_#_with_area_code]
        priceRange:
          type: string
          description: |
            A range of pricing. For example, "$$" ($-Inexpensive, $$-Moderate, $$$-Expensive, $$$$-Very Expensive)
            Always use the Dollar sign in this special field, also when your normal operating prices are in another currency
        hasMenu:
          type: array
          minItems: 1
          description: |
            One or more Menus offered by the restaurant.  
          items:
            $ref: '#/components/schemas/MenuReference'
        logo:
          type: string
          description: |
            A logo of the restaurant in PNG, JPG, or GIF format. For example, "http://www.somerestaurant.com/logo.png".  
        image:
          type: string
          description: |
            The Url for an image of the restaurant.  
        servesCuisine:
          type: array
          items:
            type: string
          description: |
            Food types that are served at the restaurant. For example, ["sushi","Asian fusion"].  
        address:
          $ref: '#/components/schemas/PostalAddressRestaurant'
        geo:
          $ref: '#/components/schemas/GeoCoordinates'
        suitableForDiet:
          type: array
          items:
            $ref: '#/components/schemas/RestrictedDiet'
          description: |
            Dietary restrictions the restaurant accommodates (e.g. kosher, vegan, gluten-free diet, etc). It is an enumerated list.  
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        additionalProperty:
          type: array
          description: |
            Additional information about the restaurant in the format of an Array of name value string pairs.  
            For example [{"name": "imprint", "value": "first row\nsecondrow\n"}]
          items:
            type: object
            properties:
              name:
                type: string
                description: |
                  The table type: e.g. "imprint"
              value:
                type: string
                description: |
                  Additional information about the restaurant,
                  such as legal name, legal address, and registration number.  

                  This information can be formatted using "\n".  
        makesOffer:
          type: array
          minItems: 1
          description: |
            One or more Deals offered by the restaurant.  
          items:
            $ref: '#/components/schemas/DealReference'
        fulfillment:
          $ref: '#/components/schemas/FulfillmentConfig'
      required:
        - '@type'
        - '@id'
        - name
        - url
        - telephone
        - hasMenu
        - servesCuisine
        - address
        - geo
      example:
        '@type': Restaurant
        '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk
        name: Wessburger
        url: 'https://orderdirect.online/restaurant/wessburger-wesseling.html'
        sameAs: 'http://www.wessburger.de'
        telephone: '+4922365096037'
        address:
          '@type': PostalAddress
          streetAddress: Flach-Fengler-Straße 120A
          postalCode: '50389'
          addressLocality: Wesseling
          addressRegion: NRW
          addressCountry: DE
        geo:
          '@type': GeoCoordinates
          latitude: '50.81969792398563'
          longitude: '6.975704512268408'
        servesCuisine:
          - Burger
        hasMenu:
          - '@type': MenuReference
            '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/m/1
        additionalProperty:
          - name: imprint
            value: |
              Wessburger
              Flach-Fengler-Straße 120A
              50389 Wesseling
              Inhaber: Ole Owner
              E-Mail: info@wessburger.de
              Telefon: +4922365096037
        makesOffer:
          - '@type': DiscountFoodOfferReference
            '@id': d/123
    RestaurantReference:
      type: object
      description: |
        A reference to an existing Restaurant
      properties:
        '@type':
          type: string
          enum:
            - RestaurantReference
        '@id':
          type: string
          description: |
            A unique identifier of the linked Restaurant.  
      required:
        - '@type'
        - '@id'
    Service:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - Service
            - DisabledService
          description: |
            "Service" Use this type for all active Service feeds.  

            "DisabledService" Only use this type when you must disable a Service entity due to an unexpected event + you don't know when the service will be re-established (e.g. for holidays)
        '@id':
          type: string
          description: |
            Unique identifier for the fulfillment service {restaurant_ID}/s_d/{your_ID}" or "{restaurant_ID}/s_t/{your_ID}"
        description:
          type: string
          description: |
            Description of the item.  
        serviceType:
          type: string
          description: |
            The type of service being offered. Possible values are "DELIVERY" or "TAKEOUT".  
        provider:
          $ref: '#/components/schemas/RestaurantReference'
        areaServed:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/GeoShape'
              - $ref: '#/components/schemas/Place'
              - $ref: '#/components/schemas/GeoCircle'
          description: |
            The geographic area where a service is provided. the field is optional by default, but required when serviceType is "DELIVERY".  
            conditional
        hoursAvailable:
          type: array
          items:
            $ref: '#/components/schemas/OpeningHoursSpecification'
          description: |
            The hours during which the service is available.  
        specialOpeningHoursSpecification:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OpeningHoursSpecification'
              - $ref: '#/components/schemas/ServiceDeliveryHoursSpecification'
              - $ref: '#/components/schemas/AdvanceServiceDeliveryHoursSpecification'
          description: |
            Times that override the more general OpeningHoursSpecification or the fulfillment times. You typically use the field to define holidays + other types of temporary closures/changes in hours.  
            You define the special date range using the validFrom + validThrough properties. The time + timezone are required when specifying these properties.  
        offers:
          type: array
          items:
            $ref: '#/components/schemas/OfferService'
          description: |
            Details about the delivery/takeout offering for a specified restaurant. The field is optional by default, but required when serviceType is "DELIVERY".  
        hasOfferCatalog:
          $ref: '#/components/schemas/MenuCatalogReference'
      required:
        - '@type'
        - '@id'
        - serviceType
        - provider
        - hoursAvailable
        - hasOfferCatalog
      example:
        '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/s_d/85
        '@type': Service
        serviceType: DELIVERY
        provider:
          '@type': RestaurantReference
          '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk
        hasOfferCatalog:
          '@type':
            - MenuReference
            - OfferCatalog
          '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/m/1
        offers:
          - '@type': Offer
            priceSpecification:
              - '@id': r/ChIJ13mR2PMhv0cRKac2RnCMZhk/s_d/85/fee_delivery_default
                '@type': DeliveryChargeSpecification
                price: '0'
                priceCurrency: EUR
                eligibleTransactionVolume:
                  '@type': PriceSpecification
                  minPrice: '8'
                  priceCurrency: EUR
        areaServed:
          - '@type': GeoShape
            polygon:
              - 50.82359856289408 6.96146600571285 50.824314432299545 6.963664076000555 50.82500995880669 6.964617601305349 50.82723116896003 6.963681510359152 50.847340931846624 6.967946222692831 50.84479381320981 6.976400545507772 50.842273654723435 6.978138616949423 50.83694835605344 6.9765185627044275 50.83162244964018 6.978331735998495 50.827339600617506 6.983052423864706 50.824249199684004 6.989403894811971 50.82365278297291 6.992837122351034 50.82245136686576 7.006847175606254 50.822071815225726 7.010366233833793 50.80942284807544 7.002856048592093 50.80894665685706 7.0039046868051855 50.8075348514988 7.005682885870215 50.80492969939581 7.009419097516229 50.80239220798786 7.011803475818624 50.79869437876337 7.000999537906637 50.79879383492897 6.990764228305807 50.7970216699789 6.9860006250953575 50.796427165872814 6.982256261310567 50.797351695257376 6.978855220279684 50.80575073812517 6.960744945011129 50.80456834505577 6.947579600647259 50.80941467088729 6.956210417997795 50.81396222278909 6.958489764401065 50.81509578732213 6.962811360295518 50.81918055426642 6.960734267999214 50.824017267278876 6.959257990522133
          - '@type': GeoCircle
            geoRadius: '1480'
            geoMidpoint:
              '@type': GeoCoordinates
              latitude: '50.81592492279859'
              longitude: '6.959878137976034'
        hoursAvailable:
          - '@type': OpeningHoursSpecification
            opens: 'T11:30'
            closes: 'T21:30'
            dayOfWeek:
              - Monday
              - Tuesday
              - Wednesday
              - Thursday
              - Friday
            deliveryHours:
              - '@type': ServiceDeliveryHoursSpecification
                opens: 'T11:30'
                closes: 'T21:30'
                dayOfWeek:
                  - Monday
                  - Tuesday
                  - Wednesday
                  - Thursday
                  - Friday
                deliveryLeadTime:
                  '@type': QuantitativeValue
                  value: '30'
                  unitCode: MIN
    ServiceDeliveryHoursSpecification:
      type: object
      description: |
        Describes the possible fulfillment time for delivery or takeout ASAP orders.  
      properties:
        '@type':
          type: string
          enum:
            - ServiceDeliveryHoursSpecification
        validFrom:
          type: string
          description: |
            The date + time (including the timezone) when users' ASAP orders can be fulfilled. For example, "2021-05-01T07:00+02:00".  
            when the property is not set, then it is assumed to be valid every day.  
            For more information, see DateTime + Time formats.  
        validThrough:
          type: string
          description: |
            The date + time (including the timezone) after which users' ASAP orders can't be fulfilled anymore. For example, "2021-05-01T07:00+02:00".  
            when the property is not set, then it is assumed to be valid every day.  
            The time for validThrough is exclusive. For example, when that time is set to 6PM, the time is valid up to 5:59:59PM.  
            For more information, see DateTime + Time formats.  
        opens:
          type: string
          description: |
            Applies to delivery or takeout orders and needs to be inside the general time window set by the main OpeningHoursSpecification.  
            The time at which delivery service starts for users' ASAP orders to be fulfilled. For example, "T10:30".  
            The time must be specified in the local time for the service. Don't include a timezone in an opens value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        closes:
          type: string
          description: |
            Applies to delivery or takeout orders and needs to be inside the general time window set by the main OpeningHoursSpecification.  
            The time when delivery service for users' ASAP orders is no longer available. For example, "T23:00".  
            The time for closes is exclusive. Therefore, when you set opens/closes for the ServiceDeliveryHoursSpecification to 10am + 4pm, then that last order is 3:59:59pm.  
            Delivery Hours crossing midnight are supported within one specification, just set the closes value to the correct time on the next day.  
            The time must be specified in the local time for the service. Don't include a timezone in a closes value. when a timezone is specified, Google ignores the information.  
            For more information, especially how to define "24h available" or "totally closed", see 'DateTime and Time values' in the introduction of this document.  
        dayOfWeek:
          type: array
          items:
            $ref: '#/components/schemas/DayOfWeek'
          description: |
            Days of the week that the service is available for users' ASAP orders. Valid values are:: "Monday" "Tuesday" "Wednesday" "Thursday" "Friday" "Saturday" "Sunday" when you Don't specify any days of week, then the ServiceDeliveryHoursSpecification applies to all days.  
        deliveryLeadTime:
          $ref: '#/components/schemas/DeliveryTimeQuantitativeValue'
      required:
        - '@type'
        - opens
        - closes
    RestrictedDiet:
      type: string
      enum:
        - 'http://schema.org/DiabeticDiet'
        - 'http://schema.org/GlutenFreeDiet'
        - 'http://schema.org/HalalDiet'
        - 'http://schema.org/HinduDiet'
        - 'http://schema.org/KosherDiet'
        - 'http://schema.org/LowCalorieDiet'
        - 'http://schema.org/LowFatDiet'
        - 'http://schema.org/LowLactoseDiet'
        - 'http://schema.org/LowSaltDiet'
        - 'http://schema.org/VeganDiet'
        - 'http://schema.org/VegetarianDiet'
    QuantitativeValue:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - QuantitativeValue
        value:
          type: string
          description: The value of the quantitative value or property value node.
        unitCode:
          type: string
          description: The unit of measurement as a UN/CEFACT Common Code or a URL. Codes other than the UN/CEFACT Common Code may be used with a prefix followed by a colon.
        maxValue:
          type: number
          description: The upper value of some characteristic or property.
        minValue:
          type: number
          description: The lower value of some characteristic or property.
      required:
        - '@type'
    DeliveryTimeQuantitativeValue:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - QuantitativeValue
        value:
          type: string
          description: The default deliverytime in minutes
        unitCode:
          type: string
          enum:
            - MIN
      required:
        - '@type'
        - value
        - unitCode
    AdvanceBookingTimeQuantitativeValue:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - QuantitativeValue
        maxValue:
          type: number
          description: 'Specifies the maximum time in minutes, when the order in advance could be fulfilled. For example, if an advance order is restricted from being fulfilled more than 2 days later'
        minValue:
          type: number
          description: 'Specifies the minimum time in minutes, needed to fulfill an order in advance. For example, if an advance order needs at least 60 minutes to be delivered or to be ready for pickup'
        unitCode:
          type: string
          enum:
            - MIN
      required:
        - '@type'
        - maxValue
        - minValue
        - unitCode
    DayOfWeek:
      type: string
      enum:
        - Monday
        - Tuesday
        - Wedndesday
        - Thursday
        - Friday
        - Satruday
        - Sunday
    AggregateRating:
      type: object
      properties:
        '@type':
          type: string
          enum:
            - AggregateRating
      description: |
        Based on <a href="https://schema.org/AggregateRating">schema.org/AggregateRating</a> If used as a property of a restaurant, it specifies the overall rating of this place based on a collection of reviews or ratings.  
        If used in the following offer types:
            AddOnMenuItem.Offer
            MenuItem.Offer
        the overall rating of the related menuItem can be specified.  
      required:
        - '@type'
    URL:
      type: string
    RestaurantIdList:
      type: array
      items:
        type: string
        description: Restaurant ID
      example:
        - r/ChIJ13mR2PMhv0cRKac2RnCMZhk
        - r/ChIJ8VegYHNOqEcRDF8BUyjgon4
    ResponseRestaurant:
      type: object
      properties:
        id:
          type: number
        restaurantId:
          type: string
        data:
          $ref: '#/components/schemas/Restaurant'
        createdAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
        partner:
          $ref: '#/components/schemas/Partner'
    ResponseMenu:
      type: object
      properties:
        id:
          type: number
        menuId:
          type: string
        data:
          $ref: '#/components/schemas/Menu'
        createdAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
        partner:
          $ref: '#/components/schemas/Partner'
        restaurant:
          type: object
          properties:
            id:
              type: number
            restaurantId:
              type: string
            data:
              $ref: '#/components/schemas/Restaurant'
            createdAt:
              type: string
              format: date
            updateAt:
              type: string
              format: date
    ResponseService:
      type: object
      properties:
        id:
          type: number
        serviceId:
          type: string
        data:
          $ref: '#/components/schemas/Service'
        createdAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
        partner:
          $ref: '#/components/schemas/Partner'
    ResponseDeal:
      type: object
      properties:
        id:
          type: number
        dealId:
          type: string
        data:
          $ref: '#/components/schemas/Deal'
        createdAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
        partner:
          $ref: '#/components/schemas/Partner'
    Partner:
      type: object
      properties:
        id:
          type: number
        partner:
          type: string
        fulfillmentEndpoint:
          type: string
        createdAt:
          type: string
          format: date
        updateAt:
          type: string
          format: date
    FulfillmentConfig:
      type: object
      title: FulfillmentConfig
      description: A required entity to implement. Describes a restaurant.
      properties:
        host:
          type: string
          description: Order endpoint to use for this specific restaurant
          example: 'https://your-backend/api'
        keyParameter:
          type: string
          description: Query parameter to use for accessing this restaurant's order endpoint
          example: key
        key:
          type: string
          example: 12ord456
        gpay:
          $ref: '#/components/schemas/GPayConfig'
    GPayConfig:
      type: object
      description: |
        If your GPay configuration is consistent for the majority of your restaurants, provide us this general GPayConfig model to be set as a default.  
        Additionally you can use the Restaurant.fulfillment.gpay config for restaurant specific GPay handling e.g. on varying PSPs.  

        The configuration is based on the GPay PaymentDataRequest model:  
        <a href="https://developers.google.com/pay/api/android/reference/request-objects#PaymentDataRequest">https://developers.google.com/pay/api/android/reference/request-objects#PaymentDataRequest</a>
      properties:
        apiVersion:
          type: number
          description: |
            Major API version. The value is 2 for this specification.
        apiVersionMinor:
          type: number
          description: |
            Minor API version. The value is 0 for this specification.
        merchantInfo:
          $ref: '#/components/schemas/MerchantInfo'
        allowedPaymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
          description: |
            Specifies support for one or more payment methods supported by the Google Pay API.
      required:
        - apiVersion
        - apiVersionMinor
        - merchantInfo
        - allowedPaymentMethods
    MerchantInfo:
      type: object
      properties:
        merchantId:
          type: string
          description: |
            A Google merchant identifier issued by your PSP.
        merchantName:
          type: string
          description: |
            Merchant name encoded as UTF-8. Merchant name is rendered in the payment sheet.
      required:
        - merchantName
    PaymentMethod:
      type: object
      properties:
        type:
          type: string
          description: |
            A short identifier for the supported payment method. Only CARD is currently supported.
        parameters:
          $ref: '#/components/schemas/CardParameters'
        tokenizationSpecification:
          $ref: '#/components/schemas/TokenizationSpecification'
      required:
        - type
        - parameters
    CardParameters:
      type: object
      properties:
        allowedAuthMethods:
          type: array
          items:
            type: string
          description: |
            Fields supported to authenticate a card transaction.

            PAN_ONLY:  
            This authentication method is associated with payment cards stored on file with the user's Google Account. Returned payment data includes personal account number (PAN) with the expiration month and the expiration year.

            CRYPTOGRAM_3DS:  
            This authentication method is used for SCA payments compliant with the new PSD2 regulation.
        allowedCardNetworks:
          type: array
          items:
            type: string
          description: |
            One or more card networks that you support, also supported by the Google Pay API.  
            VISA  
            MASTERCARD  
            AMEX
        billingAddressRequired:
          type: boolean
          description: |
            Set to true if you require a billing address. A billing address should only be requested if it's required to process the transaction. Additional data requests can increase friction in the checkout process and lead to a lower conversion rate.
        cvcRequired:
          type: boolean
          description: |
            Set to true if you require CVC.
        cardNetworkParameters:
          type: array
          items:
            $ref: '#/components/schemas/CardNetworkParameter'
          description: |
            Contains details about the card networks you offer with GPay.
      required:
        - allowedAuthMethods
        - allowedCardNetworks
        - cardNetworkParameters
    CardNetworkParameter:
      type: object
      properties:
        acquirerBin:
          type: string
          description: |
            Your acquirer bank identification number
        cardNetwork:
          type: string
          description: |
            The card network e.g. "VISA" or "MASTERCARD"
        acquirerMerchantId:
          type: string
          description: |
            Your merchant ID from the acquirer
    TokenizationSpecification:
      type: object
      properties:
        type:
          type: string
          description: |
            A payment method tokenization type is supported for the given PaymentMethod.  
            For CARD payment method use PAYMENT_GATEWAY.
        parameters:
          type: string
          additionalProperties:
            type: string
          description: |
            Map of key/value pairs that describe the payment tokenization configuration. The actual parameter names and their values depend on your PSP.  
      required:
        - type
        - parameters
